#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/select.h>

#define BUF_SIZE 4096

void error_handling(char *msg);

int main(int argc, char *argv[])
{
	int serv_sock, clnt_sock, clnt_len;
	unsigned char buf[BUF_SIZE];
	struct sockaddr_in serv_adr, clnt_adr;
	fd_set fs_status;

	if (2 != argc) {
		printf("Usage : %s <port> \n", argv[0]);
		exit(1);
	}

	if (-1 == (serv_sock = socket(AF_INET, SOCK_STREAM, 0)))
		error_handling("socket() error");

	memset(&serv_adr, 0, sizeof(serv_adr));
	serv_adr.sin_family = AF_INET;
	serv_adr.sin_addr.s_addr = htonl("127.0.0.1");
	serv_adr.sin_port = htons(atoi("3389"));
	
	if (-1 == bind(serv_sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)))
		error_handling("bind() error");
	
	if (-1 == listen(serv_sock, 5))
		error_handling("listen() error");

	clnt_len = sizeof(clnt_adr);
	

	if (-1 == (clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_adr, &clnt_len)))
		error_handling("accept() error");
	
	printf("%d connected!\n", clnt_sock);

	/*
	while(1)
	{
		FD_ZERO(&fs_status);
		FD_SET(0, &fs_status);
		FD_SET(clnt_sock, &fs_status);

		select(clnt_sock+1, &fs_status, 0, 0, 0);
		
		if (1 == FD_ISSET(clnt_sock, &fs_status))
		{
			printf("%d connected!\n", clnt_sock);
		}
	}
	*/


	return 0;
}

void error_handling(char *msg)
{
	perror(msg);
	fputs(msg, stderr);
	fputc('\n', stderr);
	exit(1);
}
